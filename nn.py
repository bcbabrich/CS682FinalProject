# neural network code taken from here:
# https://towardsdatascience.com/a-simple-starter-guide-to-build-a-neural-network-3c2cf07b8d7c

# imports
import torch
import torch.nn as nn
import torchvision.datasets as dsets
import torchvision.transforms as transforms
from torch.autograd import Variable

# define our network
# this is just a fully-connected 2 layer network
class Net(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes):
        super().__init__()                    # Inherited from the parent class nn.Module
        self.fc1 = nn.Linear(input_size, hidden_size)  # 1st Full-Connected Layer: 784 (input data) -> 500 (hidden node)
        nn.init.kaiming_normal_(self.fc1.weight)
        self.relu = nn.ReLU()                          # Non-Linear ReLU Layer: max(0,x)
        self.fc2 = nn.Linear(hidden_size, num_classes) # 2nd Full-Connected Layer: 500 (hidden node) -> 10 (output class)
        nn.init.kaiming_normal_(self.fc2.weight)
    
    def forward(self, x):                              # Forward pass: stacking each layer together
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)
        return out

def runExperiment(learning_rate, hidden_size) :
    # set hyperparameters for neural network
    # these are not generated by poisson right now
    input_size = 784                             # The image size = 28 x 28 = 784
    num_classes = 10                             # The number of output classes. In this case, from 0 to 9
    num_epochs = 1                               # The number of times entire dataset is trained
    batch_size = 600                             # The size of input data took for one iteration
    
    # redundant but kept for now for clarity
    learning_rate = learning_rate                # The speed of convergence
    hidden_size = hidden_size                    # The number of nodes at the hidden layer

    # download dataset
    # this ony happens on the first run
    train_dataset = dsets.MNIST(root='./data',
                               train=True,
                               transform=transforms.ToTensor(),
                               download=True)

    test_dataset = dsets.MNIST(root='./data',
                               train=False,
                               transform=transforms.ToTensor())

    # load them into our codes
    train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                              batch_size=batch_size,
                                              shuffle=True)

    test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                              batch_size=batch_size,
                                              shuffle=False)
    # create an instance of our network
    net = Net(input_size, hidden_size, num_classes)

    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate)

    # train!
    for epoch in range(num_epochs):
        for i, (images, labels) in enumerate(train_loader):   # Load a batch of images with its (index, data, class)
            images = Variable(images.view(-1, 28*28))         # Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28
            labels = Variable(labels)

            optimizer.zero_grad()                             # Intialize the hidden weight to all zeros
            outputs = net(images)                             # Forward pass: compute the output class given a image
            loss = criterion(outputs, labels)                 # Compute the loss: difference between the output class and the pre-given label
            loss.backward()                                   # Backward pass: compute the weight
            optimizer.step()                                  # Optimizer: update the weights of hidden nodes

            '''
            if (i+1) % 100 == 0:                              # Logging
                print('Epoch [%d/%d], Step [%d/%d], Loss: %.4f'
                     %(epoch+1, num_epochs, i+1, len(train_dataset)//batch_size, loss.data[0]))
            '''

    # test!
    correct = 0
    total = 0
    for images, labels in test_loader:
        images = Variable(images.view(-1, 28*28))
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)  # Choose the best class from the output: The class with the best score
        total += labels.size(0)                    # Increment the total count
        correct += (predicted == labels).sum()     # Increment the correct count

    #print('Accuracy of the network on the 10K test images: %d %%' % (100 * correct / total))
    #accuracy = int((100 * correct / total))
    #print('accuracy within nn method: ',accuracy)
    return int((100 * correct / total))
